wrd <- rbindlist(l)
} else {wrd <- t_wrd}
incl <- TRUE
if (incl){
p <- 10
} else {p <- 3}
p
incl = FALSE
if (incl){
p <- 10
} else {p <- 3}
p
if (incl){
l <- (wrd, t_wrd)
wrd <- rbindlist(l)
} else {wrd <- t_wrd}
l <- (wrd, t_wrd)
wrd <- rbindlist(l)
if (incl){
l <- (quad_fq_p[1:3, ], t_wrd)
wrd <- rbindlist(l)
} else {wrd <- t_wrd}
head(quad_fq_p)
l <- (quad_fq_p[1:3], tri_fq_p[1:3])
l <- list(quad_fq_p[1:3], tri_fq_p[1:3])
;
l
?list
l <- list(quad_fq_p[1:3], tri_fq_p[1:3], remove.na = TRUE)
l
wrd <- rbindlist(l)
l <- list(quad_fq_p[1:3], tri_fq_p[1:3])
wrd <- rbindlist(l)
wrd
wrd <- rbindlist(l)
wrd[complete.cases(wrd),]
l <- list(quad_fq_p, tri_fq_p, bi_fq_p)
wrd <- rbindlist(l)
wrd <- wrd[complete.cases(wrd),]
head(wrd)
mx <- max(wrd_dt$p)
wrd <- wrd_dt[p == mx,]
wrd_dt <- rbindlist(l)
wrd_dt <- wrd[complete.cases(wrd),]
mx <- max(wrd_dt$p)
wrd <- wrd_dt[p == mx,]
wrd
word_pred <- function(input_txt){
if (input_txt == ""){
wrd <- ""
} else {
split_txt <- unlist(str_split(input_txt, " "))
w1_in <- split_txt[length(split_txt)]
w2_in <- split_txt[(length(split_txt)-1)]
w3_in <- split_txt[(length(split_txt)-2)]
quad_fq_sub <- ng_quad_w[(w3 == w3_in & w2 == w2_in & w1 == w1_in), wi, freq]
tri_fq_sub <- ng_tri_w[(w2 == w2_in & w1 == w1_in), wi, freq]
bi_fq_sub <- ng_bi_w[w1 == w1_in, wi, freq]
if(dim(quad_fq_sub)[1] > 0){
ln <- dim(quad_fq_sub)[1]
p_quad <- vector("numeric", ln)
for (i in 1:ln){
y <- quad_fq_sub$freq
x <- SGT_quad[r == y[i],p]
p_quad[i] <- x
}
quad_fq_p <- data.table(wi = quad_fq_sub$wi, p = p_quad)
quad_fq_p <- setorder(quad_fq_p, -p)
#                         q_wrd <- quad_fq_p[1:3, ]
}
if (dim(tri_fq_sub)[1] > 0){
ln <- dim(tri_fq_sub)[1]
p_tri <- vector("numeric", ln)
for (i in 1:ln){
y <- tri_fq_sub$freq
x <- SGT_tri[r == y[i],p]
p_tri[i] <- x
}
tri_fq_p <- data.table(wi = tri_fq_sub$wi, p = p_tri)
tri_fq_p <- setorder(tri_fq_p, -p)
#                         t_wrd <- tri_fq_p[1:3, ]
}
if (dim(bi_fq_sub)[1] > 0){
ln <- dim(bi_fq_sub)[1]
p_bi <- vector("numeric", ln)
for (i in 1:ln){
y <- bi_fq_sub$freq
x <- SGT_bi[r == y[i],p]
p_bi[i] <- x
}
bi_fq_p <- data.table(wi = bi_fq_sub$wi, p = p_bi)
bi_fq_p <- setorder(bi_fq_p, -p)
#                         b_wrd <- bi_fq_p[1:3, ]
}
#                 l <- list(q_wrd, t_wrd, b_wrd)
l <- list(quad_fq_p, tri_fq_p, bi_fq_p)
wrd_dt <- rbindlist(l)
wrd_dt <- wrd[complete.cases(wrd),]
mx <- max(wrd_dt$p)
wrd <- wrd_dt[p == mx,]
#                 l <- (q_wrd, t_wrd, b_wrd)
#                 wrd <- rbindlist(l)
#
#                 else {
#                         wrd <- com_wrd
#                 }
}
return(wrd)
}
quiz <- read.table("quiz.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
a <- quiz$Phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
d <- c == quiz$Answer
d
head(c)
word_pred("and make me the")
input_txt <- "and make me the"
split_txt <- unlist(str_split(input_txt, " "))
w1_in <- split_txt[length(split_txt)]
w2_in <- split_txt[(length(split_txt)-1)]
w3_in <- split_txt[(length(split_txt)-2)]
quad_fq_sub <- ng_quad_w[(w3 == w3_in & w2 == w2_in & w1 == w1_in), wi, freq]
tri_fq_sub <- ng_tri_w[(w2 == w2_in & w1 == w1_in), wi, freq]
bi_fq_sub <- ng_bi_w[w1 == w1_in, wi, freq]
dim(quad_fq_sub)
dim(tri_fq_sub)
dim(bi_fq_sub)
if (dim(tri_fq_sub)[1] > 0){
ln <- dim(tri_fq_sub)[1]
p_tri <- vector("numeric", ln)
for (i in 1:ln){
y <- tri_fq_sub$freq
x <- SGT_tri[r == y[i],p]
p_tri[i] <- x
}
tri_fq_p <- data.table(wi = tri_fq_sub$wi, p = p_tri)
tri_fq_p <- setorder(tri_fq_p, -p)
}
head(tri_fq_p)
if (dim(bi_fq_sub)[1] > 0){
ln <- dim(bi_fq_sub)[1]
p_bi <- vector("numeric", ln)
for (i in 1:ln){
y <- bi_fq_sub$freq
x <- SGT_bi[r == y[i],p]
p_bi[i] <- x
}
bi_fq_p <- data.table(wi = bi_fq_sub$wi, p = p_bi)
bi_fq_p <- setorder(bi_fq_p, -p)
#                         b_wrd <- bi_fq_p[1:3, ]
}
l <- list(quad_fq_p, tri_fq_p, bi_fq_p)
l
wrd_dt <- rbindlist(l)
dim(wrd_dt)
wrd_dt <- wrd[complete.cases(wrd),]
dim(wrd_dt)
l <- list(quad_fq_p, tri_fq_p, bi_fq_p)
wrd_dt <- rbindlist(l)
wrd_dt <- wrd_dt[complete.cases(wrd),]
dim(wrd_dt)
mx <- max(wrd_dt$p)
wrd <- wrd_dt[p == mx,]
wrd
word_pred("would mean the")
input_txt <- "would mean the"
split_txt <- unlist(str_split(input_txt, " "))
w1_in <- split_txt[length(split_txt)]
w2_in <- split_txt[(length(split_txt)-1)]
w3_in <- split_txt[(length(split_txt)-2)]
quad_fq_sub <- ng_quad_w[(w3 == w3_in & w2 == w2_in & w1 == w1_in), wi, freq]
tri_fq_sub <- ng_tri_w[(w2 == w2_in & w1 == w1_in), wi, freq]
bi_fq_sub <- ng_bi_w[w1 == w1_in, wi, freq]
dim(quad_fq_sub)
dim(tri_fq_sub)
dim(bi_fq_sub)
w2_in
w1_in
tri_fq_p
tri_fq_sub
if (dim(tri_fq_sub)[1] > 0){
ln <- dim(tri_fq_sub)[1]
p_tri <- vector("numeric", ln)
for (i in 1:ln){
y <- tri_fq_sub$freq
x <- SGT_tri[r == y[i],p]
p_tri[i] <- x
}
tri_fq_p <- data.table(wi = tri_fq_sub$wi, p = p_tri)
tri_fq_p <- setorder(tri_fq_p, -p)
}
tri_fq_p
saveRDS(x1, "SGT_uni.rData")
ng_uni <- readRDS("ng_uni_1.rData")
source("Simple_Good_Turing.R")
SGT_uni <- SGT_func(ng_uni)             # create SGT
P0 <- P_zero(SGT_uni)                   # P_zero
sum(SGT_uni$n * SGT_uni$p) + P0 == 1    # check
P0
x1 <- SGT_uni[,c(1,2,9), with = FALSE]
saveRDS(x1, "SGT_uni.rData")
SGT_uni <- data.table(readRDS("SGT_uni.rData"))
ng_uni <- readRDS("ng_uni_1.rData")
head(ng_uni)
ng_uni <- data.table(readRDS("ng_uni_1.rData"))
wrd
wrd_dt
tri_fq_p
ln <- dim(tri_fq_p)[1]
wrd_uni <- vector("numeric", ln)
wrd_uni
for (i in 1:ln){
y <- tri_fq_p$wi
x <- [ng_uni == y[i], freq]
wrd_uni[i] <- x
}
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y[i], freq]
wrd_uni[i] <- x
}
wrd_uni
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y[i], freq]
wrd_uni[i] <- x
}
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y[i], freq]
wrd_uni[i] <- x
}
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y[i], freq]
wrd_uni[i] <- x
}
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y[i], freq]
wrd_uni[i] <- x
}
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y[i], freq]
wrd_uni[i] <- x
}
ln
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y[i], freq]
z <- SGT_uni[r == x, p]
wrd_uni[i] <- z
}
wrd_uni
wrd_dt
tri_fq_p
data.table(tri_fq_p, p_uni = wrd_uni)
setorder(data.table(tri_fq_p, p_uni = wrd_uni), -p_uni
)
q <- setorder(data.table(tri_fq_p, p_uni = wrd_uni), -p_uni)
q
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y, freq]
z <- SGT_uni[r == x, p]
wrd_uni[i] <- z
}
warnings()
mx <- x1[p == max(x1$p),]
com_wrd <- ng_uni[ng_uni$freq == mx[,r],][1]
com_wrd
com_wrd[1]
com_wrd <- as.character(readRDS("Most_Common_wrd.rData"))
com_wrd
com_wrd <- readRDS("Most_Common_wrd.rData")
com_wrd
class(com_wrd)
com_wrd[1]
as.character(com_wrd)
as.character(com_wrd[1])
as.character(com_wrd[2])
as.character(com_wrd$words)
com_wrd$words
head(tri_fq_p)
mx <- max(wrd_dt$p)
max_wrd <- wrd_dt[p == mx,]
max_wrd
mx <- max(tri_fq_p$p)
max_wrd <- tri_fq_p[p == mx,]
max_wrd
dim(max_wrd)
dim(max_wrd)[1]
dim(max_wrd)[1] > 1
wrd <- as.character(max_wrd[1,1])
wrd
wrd <- as.character(max_wrd[1,wi])
wrd
wrd_dt <- as.character(com_wrd$words)
wrd_dt
dim(wrd_dt)
dim(wrd_dt) == NULL
logical(dim(wrd_dt))
dim(wrd_dt)
is.null(dim(wrd_dt))
max_wrd <- wrd_dt[p == mx,]
mx <- max(wrd_dt$p)
wrd_dt <- tri_fq_p
wrd_dt
mx <- max(wrd_dt$p)
max_wrd <- wrd_dt[p == mx,]
mx
max_wrd
dim(max_wrd)[1] > 1
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y, freq]
z <- SGT_uni[r == x, p]
wrd_uni[i] <- z
}
for (i in 1:ln){
y <- tri_fq_p$wi
x <- ng_uni[words == y[i], freq]
z <- SGT_uni[r == x, p]
wrd_uni[i] <- z
}
wrd_uni
max_wrd <- data.table(max_wrd, p_uni = wrd_uni)
max_wrd <- setorder(max_wrd, -p_uni)
ln <- dim(wrd_dt)[1]
p_uni <- vector("numeric", ln)
ln
ln <- dim(max_wrd)[1]
p_uni <- vector("numeric", ln)
ln
ln <- dim(max_wrd)[1]
max_wrd
max_wrd <- o
max_wrd <- 0
mx <- max(wrd_dt$p)
max_wrd <- wrd_dt[p == mx,]
max_wrd
ln <- dim(max_wrd)[1]
p_uni <- vector("numeric", ln)
for (i in 1:ln){
y <- wrd_dt$wi
x <- ng_uni[words == y[i], freq]
z <- SGT_uni[r == x, p]
p_uni[i] <- z
}
p_uni
max_wrd <- data.table(max_wrd, p_uni = p_uni)
max_wrd <- setorder(max_wrd, -p_uni)
max_wrd
wrd <- as.character(max_wrd[1,wi])
wrd
wrd <- as.character(max_wrd[1,wi])
wrd
shiny::runApp()
?str_trim
shiny::runApp()
wrd_dt <- as.character(com_wrd$words)
com_wrd
com_wrd <- as.character(readRDS("Most_Common_wrd.rData"))
com_wrd
com_wrd <- readRDS("Most_Common_wrd.rData")
com_wrd
wrd_dt <- as.character(com_wrd$words)
wrd_dt
shiny::runApp()
quiz <- read.table("quiz.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
word_pred <- function(input_txt){
if (input_txt == ""){
wrd <- ""
} else {
split_txt <- unlist(str_split(input_txt, " "))
w1_in <- split_txt[length(split_txt)]
w2_in <- split_txt[(length(split_txt)-1)]
w3_in <- split_txt[(length(split_txt)-2)]
quad_fq_sub <- ng_quad_w[(w3 == w3_in & w2 == w2_in & w1 == w1_in), wi, freq]
tri_fq_sub <- ng_tri_w[(w2 == w2_in & w1 == w1_in), wi, freq]
bi_fq_sub <- ng_bi_w[w1 == w1_in, wi, freq]
if(dim(quad_fq_sub)[1] > 0){
ln <- dim(quad_fq_sub)[1]
p_quad <- vector("numeric", ln)
for (i in 1:ln){
y <- quad_fq_sub$freq
x <- SGT_quad[r == y[i],p]
p_quad[i] <- x
}
quad_fq_p <- data.table(wi = quad_fq_sub$wi, p = p_quad)
wrd_dt <- setorder(quad_fq_p, -p)
#                         quad_fq_p <- setorder(quad_fq_p, -p)
#                         wrd <- quad_fq_p[1, wi]
} else if (dim(tri_fq_sub)[1] > 0){
ln <- dim(tri_fq_sub)[1]
p_tri <- vector("numeric", ln)
for (i in 1:ln){
y <- tri_fq_sub$freq
x <- SGT_tri[r == y[i],p]
p_tri[i] <- x
}
tri_fq_p <- data.table(wi = tri_fq_sub$wi, p = p_tri)
wrd_dt <- setorder(tri_fq_p, -p)
#                         tri_fq_p <- setorder(tri_fq_p, -p)
#                         wrd <- tri_fq_p[1, wi]
} else if (dim(bi_fq_sub)[1] > 0){
ln <- dim(bi_fq_sub)[1]
p_bi <- vector("numeric", ln)
for (i in 1:ln){
y <- bi_fq_sub$freq
x <- SGT_bi[r == y[i],p]
p_bi[i] <- x
}
bi_fq_p <- data.table(wi = bi_fq_sub$wi, p = p_bi)
wrd_dt <- setorder(bi_fq_p, -p)
#                         bi_fq_p <- setorder(bi_fq_p, -p)
#                         wrd <- bi_fq_p[1, wi]
} else {
wrd_dt <- as.character(com_wrd$words)
}
if(is.null(dim(wrd_dt))){
wrd <- wrd_dt
} else {
mx <- max(wrd_dt$p)
max_wrd <- wrd_dt[p == mx,]
if(dim(max_wrd)[1] > 1){
ln <- dim(max_wrd)[1]
p_uni <- vector("numeric", ln)
for (i in 1:ln){
y <- wrd_dt$wi
x <- ng_uni[words == y[i], freq]
z <- SGT_uni[r == x, p]
p_uni[i] <- z
}
max_wrd <- data.table(max_wrd, p_uni = p_uni)
max_wrd <- setorder(max_wrd, -p_uni)
wrd <- as.character(max_wrd[1,wi])
} else {
wrd <- as.character(max_wrd[1,wi])
}
}
}
return(wrd)
}
a <- quiz$Phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
d <- c == quiz$Answer
d
c
b
cleanData <- function(input_txt){
tmp <- input_txt
tmp <- tolower(tmp) ## set to lowercase only
tmp <- gsub(pattern = "'", replacement = "", tmp) ## remove apostrophe
tmp <- gsub(pattern = "[[:punct:]]", replacement = " ", tmp) ## remove other punctuation
tmp <- gsub(pattern = "[[:digit:]]", replacement = " ", tmp) ## remove numbers
tmp <- gsub(pattern = "[^[:alnum:]]", replacement = " ", tmp) ## remove other alphanumerics
tmp <- gsub(pattern = "\\s+", replacement = " ", tmp) ## replace any double spaces
tmp <- str_trim(tmp, side = "both") ## trim whitespace from start and end of string
return(tmp)
}
a <- quiz$Phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
d <- c == quiz$Answer
b
a
a <- quiz$phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
d <- c == quiz$answer
d
getwd()
a
quiz <- read.table("quiz.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
View(quiz)
quiz <- read.table("quiz.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
View(quiz)
quiz <- read.table("quiz.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
View(quiz)
quiz <- read.table("quiz.csv", sep=",", header = TRUE, stringsAsFactors = FALSE)
View(quiz)
quiz <- read.table("quiz.csv", sep="|", header = TRUE, stringsAsFactors = FALSE)
View(quiz)
quiz <- read.table("quiz.csv", sep="|", header = TRUE, stringsAsFactors = FALSE)
View(quiz)
quiz1 <- read.table("quiz.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
head(quiz1)
tail(quiz1)
quiz1 <- read.table("quiz1.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
quiz1 <- read.table("quiz1.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
View(quiz1)
quiz <- read.table("quiz.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE)
View(quiz)
a <- quiz$Phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
unlist(c)
a <- quiz$phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
d <- c == quiz$answer
sum(d)
d
c
test_result <- data.table(quiz, result = c)
head(test_result)
tail(test_result)
shiny::runApp()
