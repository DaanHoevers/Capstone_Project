a <- quiz$Phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
unlist(c)
a <- quiz$phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
d <- c == quiz$answer
sum(d)
d
c
test_result <- data.table(quiz, result = c)
head(test_result)
tail(test_result)
shiny::runApp()
# server
libs <- c("shiny", "stringr", "data.table")
load <- lapply(libs, require, character.only = TRUE)
ng_tri_w <- data.table(readRDS(paste0(file_path, "ng_tri_w.rData")))
ng_bi_w <- data.table(readRDS(paste0(file_path,"ng_bi_w.rData")))
ng_quad_w <- data.table(readRDS(paste0(file_path, "ng_quad_w.rData")))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/00_created_data/"
ng_tri_w <- data.table(readRDS(paste0(file_path, "ng_tri_w.rData")))
ng_bi_w <- data.table(readRDS(paste0(file_path,"ng_bi_w.rData")))
ng_quad_w <- data.table(readRDS(paste0(file_path, "ng_quad_w.rData")))
head(ng_tri_w_
)
head(ng_tri_w)
a <- ng_tri_w[freq != 1, ]
dim(a)
dim(ng_tri_w)
b <- ng_bi_w[freq != 1, ]
dim(ng_bi_w); dim(b)
dim(ng_quad_w); dim(c)
b <- ng_quad_w[freq != 1, ]
c <- ng_quad_w[freq != 1, ]
dim(ng_quad_w); dim(c)
tail(c)
ng_bi_w <- ng_bi_w[freq ! = 1, ]
ng_tri_w <- ng_tri_w[freq ! = 1, ]
ng_quad_w <- ng_quad_w[freq ! = 1, ]
ng_bi_w <- ng_bi_w[freq != 1, ]
ng_tri_w <- ng_tri_w[freq != 1, ]
ng_quad_w <- ng_quad_w[freq != 1, ]
dim(ng_quad_w); dim(c)
saveRDS(ng_tri_w, paste0(file_path, "ng_tri_w.RData"))
saveRDS(ng_quad_w, paste0(file_path, "ng_quad_w.RData"))
ng_uni_w <- data.table(readRDS(paste0(file_path, "ng_uni_1.rData")))
a <- ng_uni_w[freq != 1, ]
dim(ng_uni_w); dim(a)
ng_uni_w <- ng_uni_w[freq != 1, ]
saveRDS(ng_uni_w, paste0(file_path, "ng_uni_w.RData"))
com_wrd <- readRDS(paste0(file_path, "Most_Common_wrd.rData"))
head(com_wrd)
ng_quad_w <- ng_quad_w[freq != 2, ]
dim(ng_quad_w)
saveRDS(ng_quad_w, paste0(file_path, "ng_quad_w.RData"))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/"
ng_uni <- readRDS(paste0(file_path, "ng_uni_1.rData"))
mx <- x1[p == max(x1$p),]
com_wrd <- ng_uni[ng_uni$freq == mx[,r],][1]
SGT_uni <- SGT_func(ng_uni)             # create SGT
P0 <- P_zero(SGT_uni)                   # P_zero
sum(SGT_uni$n * SGT_uni$p) + P0 == 1    # check
source("C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/Simple_Good_Turing.R")
SGT_uni <- SGT_func(ng_uni)             # create SGT
P0 <- P_zero(SGT_uni)                   # P_zero
sum(SGT_uni$n * SGT_uni$p) + P0 == 1    # check
saveRDS(x1, paste0(file_path, "SGT_uni.rData"))
x1 <- SGT_uni[,c(1,2,9), with = FALSE]
mx <- x1[p == max(x1$p),]
com_wrd <- ng_uni[ng_uni$freq == mx[,r],][1]
com_wrd
com_wrd[1]
as.character(com_wrd[1])
as.character(com_wrd$words)
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/00_created_data/"
saveRDS(com_wrd, paste0(file_path, "Most_Common_wrd.RData"))
ng_uni_w <- ng_uni_w[freq != 2, ]
ng_bi_w <- ng_bi_w[freq != 2, ]
ng_tri_w <- ng_tri_w[freq != 2, ]
saveRDS(ng_uni_w, paste0(file_path, "ng_uni_w.RData"))
saveRDS(ng_bi_w, paste0(file_path, "ng_bi_w.RData"))
saveRDS(ng_tri_w, paste0(file_path,"ng_tri_w.RData"))
saveRDS(ng_quad_w, paste0(file_path,"ng_quad_w.RData"))
shiny::runApp()
shiny::runApp()
head(ng_uni_w)
shiny::runApp()
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/00_created_data/"
com_wrd <- readRDS(paste0(file_path, "Most_Common_wrd.RData"))
setwd() <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project"
setwd <- ("C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project")
getwd()
shiny::runApp()
SGT_uni <- data.table(readRDS(paste0(file_path, "SGT_uni.RData")))
shiny::runApp()
shinyapps::configureApp("Capstone_Final_Project_Next_Word_App", size="xlarge")
shinyapps::configureApp("Capstone_Final_Project_Next_Word_App")
shiny::deployApp("Capstone_Final_Project_Next_Word_App")
shiny::runApp()
shinyapps::configureApp("Capstone_Final_Project_Next_Word_App", size="xlarge")
shinyapps::deployApp("Capstone_Final_Project_Next_Word_App")
shinyapps::deployApp()
library(shinyapps)
deployApp()
deployApp("Capstone_Final_Project_Next_Word_App")
deployApp("/Capstone_Final_Project_Next_Word_App")
deployApp()
?deployApp()
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
configureApp("Capstone_Final_Project_Next_Word_App", size="xxlarge")
configureApp("Capstone_Final_Project_Next_Word_App", size="xlarge")
showLogs()
showLogs("Capstone_Final_Project_Next_Word_App"
)
shiny::runApp()
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
showLogs("Capstone_Final_Project_Next_Word_App")
install.packages("data.table")
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/"
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/00_created_data/"
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/"
source("C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/Simple_Good_Turing.R")
ng_uni <- readRDS(paste0(file_path, "ng_uni_1.rData"))
SGT_uni <- SGT_func(ng_uni)             # create SGT
P0 <- P_zero(SGT_uni)                   # P_zero
sum(SGT_uni$n * SGT_uni$p) + P0 == 1    # check
x1 <- SGT_uni[,c(1,2,9), with = FALSE]
mx <- x1[p == max(x1$p),]
com_wrd <- ng_uni[ng_uni$freq == mx[,r],][1]
com_wrd <- as.character(com_wrd$words)
saveRDS(com_wrd, paste0(file_path, "Most_Common_wrd.RData"))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/00_created_data/"
mx <- x1[p == max(x1$p),]
com_wrd <- ng_uni[ng_uni$freq == mx[,r],][1]
com_wrd <- as.character(com_wrd$words)
saveRDS(com_wrd, paste0(file_path, "Most_Common_wrd.RData"))
file_path <- "./00_created_data/"
com_wrd <- readRDS(paste0(file_path, "Most_Common_wrd.RData"))
com_wrd
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
file_path <- "00_created_data/"
com_wrd <- readRDS(paste0(file_path, "Most_Common_wrd.RData"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
showLogs("Capstone_Final_Project_Next_Word_App")
shiny::runApp()
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
showLogs("Capstone_Final_Project_Next_Word_App")
shiny::runApp()
shiny::runApp()
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
deployApp(appName = "Capstone_Final_Project_Next_Word_App")
source(paste0(file_path, "Sample_Creation.R"))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/"
source(paste0(file_path, "Sample_Creation.R"))
source(paste0(file_path, "Simple_Good_Turing.R"))
# source("C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/Simple_Good_Turing.R")
## ------------------ Create Simple Good Turing Files
# read tables 1%
ng_uni <- readRDS(paste0(file_path, "ng_uni_1.rData"))
ng_bi <- readRDS(paste0(file_path, "ng_bi_1.rData"))
ng_tri <- readRDS(paste0(file_path, "ng_tri_1.rData"))
ng_quad <- readRDS(paste0(file_path,"ng_quad_1.rData"))
## create Simple Good Turing
# uni
SGT_uni <- SGT_func(ng_uni)             # create SGT
P0 <- P_zero(SGT_uni)                   # P_zero
sum(SGT_uni$n * SGT_uni$p) + P0 == 1    # check
# bi
SGT_bi <- SGT_func(ng_bi)                # create SGT
P0 <- P_zero(SGT_bi)                    # P_zero
sum(SGT_bi$n * SGT_bi$p) + P0 == 1      # check
# tri
SGT_tri <- SGT_func(ng_tri)               # create SGT
P0 <- P_zero(SGT_tri)                   # P_zero
sum(SGT_tri$n * SGT_tri$p) + P0 == 1    # check
# quad
SGT_quad <- SGT_func(ng_quad)               # create SGT
P0 <- P_zero(SGT_quad)                   # P_zero
sum(SGT_quad$n * SGT_quad$p) + P0 == 1    # check
# create only relevant columns
x1 <- SGT_uni[,c(1,2,9), with = FALSE]
x2 <- SGT_bi[,c(1,2,9), with = FALSE]
x3 <- SGT_tri[,c(1,2,9), with = FALSE]
x4 <- SGT_quad[,c(1,2,9), with = FALSE]
# set new file path
file_path_n <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/data/"
source(paste0(file_path, "Simple_Good_Turing.R"))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/"
source(paste0(file_path, "Simple_Good_Turing.R"))
ng_uni <- readRDS(paste0(file_path, "ng_uni_1.rData"))
ng_bi <- readRDS(paste0(file_path, "ng_bi_1.rData"))
ng_tri <- readRDS(paste0(file_path, "ng_tri_1.rData"))
ng_quad <- readRDS(paste0(file_path,"ng_quad_1.rData"))
## create Simple Good Turing
# uni
SGT_uni <- SGT_func(ng_uni)             # create SGT
P0 <- P_zero(SGT_uni)                   # P_zero
sum(SGT_uni$n * SGT_uni$p) + P0 == 1    # check
# bi
SGT_bi <- SGT_func(ng_bi)                # create SGT
P0 <- P_zero(SGT_bi)                    # P_zero
sum(SGT_bi$n * SGT_bi$p) + P0 == 1      # check
# tri
SGT_tri <- SGT_func(ng_tri)               # create SGT
P0 <- P_zero(SGT_tri)                   # P_zero
sum(SGT_tri$n * SGT_tri$p) + P0 == 1    # check
# quad
SGT_quad <- SGT_func(ng_quad)               # create SGT
P0 <- P_zero(SGT_quad)                   # P_zero
sum(SGT_quad$n * SGT_quad$p) + P0 == 1    # check
# create only relevant columns
x1 <- SGT_uni[,c(1,2,9), with = FALSE]
x2 <- SGT_bi[,c(1,2,9), with = FALSE]
x3 <- SGT_tri[,c(1,2,9), with = FALSE]
x4 <- SGT_quad[,c(1,2,9), with = FALSE]
# set new file path
file_path_n <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/data/"
# save SGT tables
saveRDS(x1, paste0(file_path_n, "SGT_uni.RData"))
saveRDS(x2, paste0(file_path_n, "SGT_bi.RData"))
saveRDS(x3, paste0(file_path_n, "SGT_tri.RData"))
saveRDS(x4, paste0(file_path_n, "SGT_quad.RData"))
## ------------------ Determine Most Common word
mx <- x1[p == max(x1$p),]
com_wrd <- ng_uni[ng_uni$freq == mx[,r],][1]
com_wrd <- as.character(com_wrd$words)
saveRDS(com_wrd, paste0(file_path, "Most_Common_wrd.RData"))
## ------------------ Create Word Frequency Files
#
ng_uni_w <- data.table(wi = ng_uni$words, wi = bi_split$V2, freq = ng_bi$freq)
# split bigram
bi_split <- data.table(str_split_fixed(ng_bi$words, " ",2))
ng_uni_w <- data.table(wi = ng_uni$words, freq = ng_uni$freq)
# split bigram
bi_split <- data.table(str_split_fixed(ng_bi$words, " ",2))
# new bigram
ng_bi_w <- data.table(w1 = bi_split$V1, wi = bi_split$V2, freq = ng_bi$freq)
# split trigram
tri_split <- data.table(str_split_fixed(ng_tri$words, " ",3))
# rename column names
setnames(tri_split, c("w2", "w1", "wi"))
# new trigram
ng_tri_w <- data.table(tri_split, freq = ng_tri$freq)
# split quadgram
quad_split <- data.table(str_split_fixed(ng_quad$words, " ",4))
# rename column names
setnames(quad_split, c("w3","w2", "w1", "wi"))
# new quadgram
ng_quad_w <- data.table(quad_split, freq = ng_quad$freq)
## remove singletons
ng_uni_w <- ng_uni_w[freq != 1, ]
ng_bi_w <- ng_bi_w[freq != 1, ]
ng_tri_w <- ng_tri_w[freq != 1, ]
ng_quad_w <- ng_quad_w[freq != 1, ]
## remove freq 2 in quad
ng_uni_w <- ng_uni_w[freq != 2, ]
ng_bi_w <- ng_bi_w[freq != 2, ]
ng_tri_w <- ng_tri_w[freq != 2, ]
ng_quad_w <- ng_quad_w[freq != 2, ]
saveRDS(ng_uni_w, paste0(file_path_n, "ng_uni_w.RData"))
saveRDS(ng_bi_w, paste0(file_path_n, "ng_bi_w.RData"))
saveRDS(ng_tri_w, paste0(file_path_n,"ng_tri_w.RData"))
saveRDS(ng_quad_w, paste0(file_path_n,"ng_quad_w.RData"))
mx <- x1[p == max(x1$p),]
com_wrd <- ng_uni[ng_uni$freq == mx[,r],][1]
com_wrd <- as.character(com_wrd$words)
saveRDS(com_wrd, paste0(file_path_n, "Most_Common_wrd.RData"))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/data/"
com_wrd <- readRDS(paste0(file_path, "Most_Common_wrd.RData"))
# load SGT n grams
SGT_uni <- data.table(readRDS(paste0(file_path, "SGT_uni.RData")))
SGT_bi <- data.table(readRDS(paste0(file_path, "SGT_bi.RData")))
SGT_tri <- data.table(readRDS(paste0(file_path, "SGT_tri.RData")))
SGT_quad <- data.table(readRDS(paste0(file_path, "SGT_quad.RData")))
# load word frequencies
ng_uni_w <- data.table(readRDS(paste0(file_path, "ng_uni_w.RData")))
ng_tri_w <- data.table(readRDS(paste0(file_path, "ng_tri_w.RData")))
ng_bi_w <- data.table(readRDS(paste0(file_path,"ng_bi_w.RData")))
ng_quad_w <- data.table(readRDS(paste0(file_path, "ng_quad_w.RData")))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/"
source(paste0(file_path, "inputPreparation.R"))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/"
x <- paste0(file_path, "quiz.txt")
source('~/.active-rstudio-document', echo=TRUE)
## performance test for loading functions and data sets
ptm <- proc.time()
## load packages
library(shiny)
library(stringr)
library(data.table)
## load data files
# file path
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/data/"
# load most common word
com_wrd <- readRDS(paste0(file_path, "Most_Common_wrd.RData"))
# load SGT n grams
SGT_uni <- data.table(readRDS(paste0(file_path, "SGT_uni.RData")))
SGT_bi <- data.table(readRDS(paste0(file_path, "SGT_bi.RData")))
SGT_tri <- data.table(readRDS(paste0(file_path, "SGT_tri.RData")))
SGT_quad <- data.table(readRDS(paste0(file_path, "SGT_quad.RData")))
# load word frequencies
ng_uni_w <- data.table(readRDS(paste0(file_path, "ng_uni_w.RData")))
ng_tri_w <- data.table(readRDS(paste0(file_path, "ng_tri_w.RData")))
ng_bi_w <- data.table(readRDS(paste0(file_path,"ng_bi_w.RData")))
ng_quad_w <- data.table(readRDS(paste0(file_path, "ng_quad_w.RData")))
## load functions
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/"
source(paste0(file_path, "inputPreparation.R"))
txt_in <- "Test to obtain an output"
clean_txt <- cleanData(txt_in)
prediction <- word_pred(clean_txt)
tmRead <- proc.time() - ptm ## stop
## load quiz data
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/00_Preparation_Functions/"
x <- paste0(file_path, "quiz.txt")
quiz <- read.table(x, sep="\t", header = TRUE, stringsAsFactors = FALSE)
## prepare illustrations
sub <- quiz[c(6,16),]
a <- sub$phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
test_result <- data.table(Phrase = sub[,2], Correct_Answer = sub[,3], Result_Next_Word = c)
ng_bi_w <- data.table(readRDS(paste0(file_path, "ng_bi_w.RData")))
file_path <- "C:/Users/dhoevers/Documents/03. Knowledge/01. Data Science/09.Capstone/Capstone_Project/02_Final_Project/data/"
ng_bi_w <- data.table(readRDS(paste0(file_path, "ng_bi_w.RData")))
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
quiz <- read.table(x, sep="\t", header = TRUE, stringsAsFactors = FALSE)
a <- quiz$phrase
b <- sapply(a, cleanData)
c <- sapply(b, FUN = word_pred)
test_result <- data.table(Phrase = sub[,2], Correct_Answer = sub[,3], Result_Next_Word = c)
test_result
test_result <- data.table(Phrase = quiz[,2], Correct_Answer = quiz[,3], Result_Next_Word = c)
test_result
## D. Hoevers
## App input preparation file
## loads the data files
## defines the clean data and word prediction functions
library(shiny)
library(stringr)
library(data.table)
# load most common word
com_wrd <- readRDS("data/Most_Common_wrd.RData")
# load SGT n grams
SGT_uni <- data.table(readRDS("data/SGT_uni.RData"))
SGT_bi <- data.table(readRDS("data/SGT_bi.RData"))
SGT_tri <- data.table(readRDS("data/SGT_tri.RData"))
SGT_quad <- data.table(readRDS("data/SGT_quad.RData"))
# load word frequencies
ng_uni_w <- data.table(readRDS("data/ng_uni_w.RData"))
ng_tri_w <- data.table(readRDS("data/ng_tri_w.RData"))
ng_bi_w <- data.table(readRDS("data/ng_bi_w.RData"))
ng_quad_w <- data.table(readRDS("data/ng_quad_w.RData"))
# function to clean input data
cleanData <- function(input_txt){
tmp <- input_txt
tmp <- tolower(tmp) ## set to lowercase only
tmp <- gsub(pattern = "'", replacement = "", tmp) ## remove apostrophe
tmp <- gsub(pattern = "[[:punct:]]", replacement = " ", tmp) ## remove other punctuation
tmp <- gsub(pattern = "[[:digit:]]", replacement = " ", tmp) ## remove numbers
tmp <- gsub(pattern = "[^[:alnum:]]", replacement = " ", tmp) ## remove other alphanumerics
tmp <- gsub(pattern = "\\s+", replacement = " ", tmp) ## replace any double spaces
tmp <- str_trim(tmp, side = "both") ## trim whitespace from start and end of string
return(tmp)
}
# function to predict the next word based on
word_pred <- function(input_txt){
if (input_txt == ""){
wrd <- "Enter Text"
} else {
split_txt <- unlist(str_split(input_txt, " "))
w1_in <- split_txt[length(split_txt)]
w2_in <- split_txt[(length(split_txt)-1)]
w3_in <- split_txt[(length(split_txt)-2)]
quad_fq_sub <- ng_quad_w[(w3 == w3_in & w2 == w2_in & w1 == w1_in), wi, freq]
tri_fq_sub <- ng_tri_w[(w2 == w2_in & w1 == w1_in), wi, freq]
bi_fq_sub <- ng_bi_w[w1 == w1_in, wi, freq]
if(dim(quad_fq_sub)[1] > 0){
ln <- dim(quad_fq_sub)[1]
p_quad <- vector("numeric", ln)
for (i in 1:ln){
y <- quad_fq_sub$freq
x <- SGT_quad[r == y[i],p]
p_quad[i] <- x
}
quad_fq_p <- data.table(wi = quad_fq_sub$wi, p = p_quad)
wrd_dt <- setorder(quad_fq_p, -p)
} else if (dim(tri_fq_sub)[1] > 0){
ln <- dim(tri_fq_sub)[1]
p_tri <- vector("numeric", ln)
for (i in 1:ln){
y <- tri_fq_sub$freq
x <- SGT_tri[r == y[i],p]
p_tri[i] <- x
}
tri_fq_p <- data.table(wi = tri_fq_sub$wi, p = p_tri)
wrd_dt <- setorder(tri_fq_p, -p)
wrd <- tri_fq_p[1, wi]
} else if (dim(bi_fq_sub)[1] > 0){
ln <- dim(bi_fq_sub)[1]
p_bi <- vector("numeric", ln)
for (i in 1:ln){
y <- bi_fq_sub$freq
x <- SGT_bi[r == y[i],p]
p_bi[i] <- x
}
bi_fq_p <- data.table(wi = bi_fq_sub$wi, p = p_bi)
wrd_dt <- setorder(bi_fq_p, -p)
} else {
wrd_dt <- com_wrd
}
if(is.null(dim(wrd_dt))){
wrd <- wrd_dt
} else {
mx <- max(wrd_dt$p)
max_wrd <- wrd_dt[p == mx,]
if(dim(max_wrd)[1] > 1){
ln <- dim(max_wrd)[1]
p_uni <- vector("numeric", ln)
for (i in 1:ln){
y <- wrd_dt$wi
x <- ng_uni_w[words == y[i], freq]
z <- SGT_uni[r == x, p]
p_uni[i] <- z
}
max_wrd <- data.table(max_wrd, p_uni = p_uni)
max_wrd <- setorder(max_wrd, -p_uni)
wrd <- as.character(max_wrd[1,wi])
} else {
wrd <- as.character(max_wrd[1,wi])
}
}
}
return(wrd)
}
word_pred("romantic date at the")
q <- "romantic date at the"
input_txt <- q
split_txt <- unlist(str_split(input_txt, " "))
w1_in <- split_txt[length(split_txt)]
w2_in <- split_txt[(length(split_txt)-1)]
w3_in <- split_txt[(length(split_txt)-2)]
w3_in
quad_fq_sub <- ng_quad_w[(w3 == w3_in & w2 == w2_in & w1 == w1_in), wi, freq]
tri_fq_sub <- ng_tri_w[(w2 == w2_in & w1 == w1_in), wi, freq]
bi_fq_sub <- ng_bi_w[w1 == w1_in, wi, freq]
dim(quad_fq_sub)
dim(tri_fq_sub)
dim(bi_fq_sub)
ln <- dim(bi_fq_sub)[1]
p_bi <- vector("numeric", ln)
for (i in 1:ln){
y <- bi_fq_sub$freq
x <- SGT_bi[r == y[i],p]
p_bi[i] <- x
}
bi_fq_p <- data.table(wi = bi_fq_sub$wi, p = p_bi)
wrd_dt <- setorder(bi_fq_p, -p)
head(wrd_dt)
input_txt <- "and helps reduce your"
split_txt <- unlist(str_split(input_txt, " "))
w1_in <- split_txt[length(split_txt)]
w2_in <- split_txt[(length(split_txt)-1)]
w3_in <- split_txt[(length(split_txt)-2)]
w3_in
quad_fq_sub <- ng_quad_w[(w3 == w3_in & w2 == w2_in & w1 == w1_in), wi, freq]
tri_fq_sub <- ng_tri_w[(w2 == w2_in & w1 == w1_in), wi, freq]
bi_fq_sub <- ng_bi_w[w1 == w1_in, wi, freq]
dim(quad_fq_sub)
dim(tri_fq_sub)
dim(bi_fq_sub)
head(bi_fq_sub)
ln <- dim(bi_fq_sub)[1]
p_bi <- vector("numeric", ln)
for (i in 1:ln){
y <- bi_fq_sub$freq
x <- SGT_bi[r == y[i],p]
p_bi[i] <- x
}
bi_fq_p <- data.table(wi = bi_fq_sub$wi, p = p_bi)
wrd_dt <- setorder(bi_fq_p, -p)
head(wrd_dt)
is.null(dim(wrd_dt))
mx <- max(wrd_dt$p)
max_wrd <- wrd_dt[p == mx,]
if(dim(max_wrd)[1] > 1){
ln <- dim(max_wrd)[1]
p_uni <- vector("numeric", ln)
for (i in 1:ln){
y <- wrd_dt$wi
x <- ng_uni_w[words == y[i], freq]
z <- SGT_uni[r == x, p]
p_uni[i] <- z
}
max_wrd <- data.table(max_wrd, p_uni = p_uni)
max_wrd <- setorder(max_wrd, -p_uni)
wrd <- as.character(max_wrd[1,wi])
}
wrd
wrd <- as.character(max_wrd[1,wi])
wrd
word_pred(input_txt)
